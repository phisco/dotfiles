" Setting up Vundle - the vim plugin bundler
    let iCanHazVundle=1
    let vundle_readme=expand('~/.vim/bundle/vundle/README.md')
    if !filereadable(vundle_readme)
        echo "Installing Vundle.."
        echo ""
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
        let iCanHazVundle=0
    endif
    " set the runtime path to include Vundle and initialize
    set rtp+=~/.vim/bundle/Vundle.vim
    call vundle#begin()
    " alternatively, pass a path where Vundle should install plugins
    "call vundle#begin('~/some/path/here')

    " let Vundle manage Vundle, required
    Plugin 'gmarik/Vundle.vim'

    if iCanHazVundle == 0
        echo "Installing Bundles, please ignore key map error messages"
        echo ""
        :BundleInstall
    endif
" Setting up Vundle - the vim plugin bundler end

set nocompatible              " be iMproved, required
filetype off                  " required

" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo

" Plugin 'Lokaltog/powerline'
" Plugin 'Lokaltog/vim-powerline'
" Plugin 'kien/ctrlp.vim'
" Plugin 'vim-scripts/FuzzyFinder'

Plugin 'L9'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'Shougo/unite.vim'
Plugin 'Shougo/vimproc.vim'
Plugin 'Townk/vim-autoclose'
Plugin 'Yggdroot/indentLine'
Plugin 'altercation/vim-colors-solarized'
Plugin 'benmills/vimux'
Plugin 'bling/vim-airline'
Plugin 'davidhalter/jedi-vim'
Plugin 'ervandew/supertab'
Plugin 'flazz/vim-colorschemes'
Plugin 'garbas/vim-snipmate'
Plugin 'godlygeek/tabular'
Plugin 'honza/vim-snippets'
Plugin 'lambdalisue/nose.vim'
Plugin 'mattn/emmet-vim'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'nvie/vim-flake8'
Plugin 'nvie/vim-pyunit'
Plugin 'pangloss/vim-javascript'
Plugin 'python-rope/ropevim'
Plugin 'reinh/vim-makegreen'
Plugin 'rstacruz/sparkup'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'severin-lemaignan/vim-minimap'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tomtom/checksyntax_vim'
Plugin 'tomtom/tcomment_vim'
Plugin 'tomtom/tlib_vim'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/Superior-Haskell-Interaction-Mode-SHIM'
Plugin 'wincent/command-t'

call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
filetype on                  " required

if $TERM == "xterm-256color"
      set t_Co=256
  endif
set background=dark
hi Search guifg=#ffffff guibg=#0000ff gui=none ctermfg=white ctermbg=darkblue
hi IncSearch guifg=#ffffff guibg=#8888ff gui=none ctermfg=white
set clipboard=unnamed

syntax enable

"MODIFICHE SCRITTURA E SISTEMA
" set mouse=a
set nobackup
" set nowb
let hlstate=0
set autoindent    " always set autoindenting on
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set colorcolumn=81
set copyindent    " copy the previous indentation on autoindenting
set expandtab
set fo-=t " don't automatically wrap text when typing"
set hidden "FA APRIRE PIù BUFFER SENZA CHIUDERE PRECEDENTE
set history=1000         " remember more commands and search history
set hlsearch      " highlight search terms
set ignorecase    " ignore case when searching
set incsearch     " show search matches as you type
set noerrorbells         " don't beep
set noswapfile
set nowrap        " don't wrap lines
set number        " always show line numbers
set pastetoggle=<C-V>
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch
set showmatch     " set show matching parenthesis
set smartcase     " ignore case if search pattern is all lowercase,
set smarttab      " insert tabs on the start of a line according to
set title                " change the terminal's title
set tw=79 " width of document (used by gd)"
set undolevels=1000      " use many muchos levels of undo
set visualbell           " don't beep
set wildmenu
set wildmode=list:longest,full
""
"" REMAP
""
nnoremap <F4> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate<cr>
nnoremap Q <nop>
let mapleader=","
inoremap jk <ESC>
map <leader>w :w<return>
map <leader>q :q<return>
map <leader>Q :q!<return>
map <leader>W :w !sudo tee %<return>
"
"IMPORTED FROM
"https://github.com/mbrochh/vim-as-a-python-ide/blob/master/.vimrc
"
"
" Real programmers don't use TABs but spaces
set expandtab
set shiftround
set shiftwidth=4
set softtabstop=4
set tabstop=4

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv " better indentation
vnoremap > >gv " better indentation



"Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %"

" map sort function to a key
vnoremap <Leader>s :sort<CR>

" Settings for vim-powerline
set laststatus=2
" Settings for ctrlp
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*

" Settings for supertab
""let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" Settings for jedi-vim
let g:jedi#completions_command = "<C-N>"
let g:jedi#usages_command = "<leader>z"
let g:jedi#popup_on_dot = 1
let g:jedi#popup_select_first = 0
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
"tab complete
" function! InsertTabWrapper(direction)
    " let col = col('.') - 1
    " if !col || getline('.')[col - 1] !~ '\k'
        " return "\<tab>"
    " elseif "backward" == a:direction
        " return "\<c-p>"
    " else
        " return "\<c-n>"
    " endif
" endfunction
" inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
" inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>

set nofoldenable
"
"
"PYTHON
"
"
"let $PYTHONHOME='/System/Library/Frameworks/Python.framework/Versions/Current'
" let g:pymode_rope_lookup_project = 0
" let g:pymode_rope_autoimport = 0
let g:PyFlakeCheckers = 'pep8,mccabe,pyflakes'
let g:PyFlakeOnWrite = 1
let g:flake8_builtins="_,apply"
let g:flake8_max_line_length=120

" let g:PyFlakeDefaultComplexity=10
autocmd filetype py set foldmethod=indent
" autocmd BufWritePost *.py call Flake8()
" let g:PyFlakeAggressive = 2

" Fugitive {
        nnoremap <silent> <leader>gs :Gstatus<CR>
        nnoremap <silent> <leader>gd :Gdiff<CR>
        nnoremap <silent> <leader>gc :Gcommit<CR>
        nnoremap <silent> <leader>gb :Gblame<CR>
        nnoremap <silent> <leader>gl :Glog<CR>
        nnoremap <silent> <leader>gp :Git push<CR>
        nnoremap <silent> <leader>gr :Gread<CR>
        nnoremap <silent> <leader>gw :Gwrite<CR>
        nnoremap <silent> <leader>ge :Gedit<CR>
        " Mnemonic _i_nteractive
        nnoremap <silent> <leader>gi :Git add -p %<CR>
        nnoremap <silent> <leader>gg :SignifyToggle<CR>
    "}

"javascript
"
let javascript_enable_domhtmlcss=1
let g:user_emmet_leader_key='<C-Z>'


"MODIFICHE SCRITTURA E SISTEMA
" set mouse=a
set nobackup
" set nowb
filetype plugin indent on
let hlstate=0
set autoindent    " always set autoindenting on
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set colorcolumn=81
set copyindent    " copy the previous indentation on autoindenting
set expandtab
set fo-=t " don't automatically wrap text when typing"
set hidden "FA APRIRE PIù BUFFER SENZA CHIUDERE PRECEDENTE
set history=1000         " remember more commands and search history
set hlsearch      " highlight search terms
set ignorecase    " ignore case when searching
set incsearch     " show search matches as you type
set noerrorbells         " don't beep
set noswapfile
set nowrap        " don't wrap lines
set number        " always show line numbers
set pastetoggle=<C-V>
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch
set showmatch     " set show matching parenthesis
set smartcase     " ignore case if search pattern is all lowercase,
set smarttab      " insert tabs on the start of a line according to
set title                " change the terminal's title
set tw=79 " width of document (used by gd)"
set undolevels=1000      " use many muchos levels of undo
set visualbell           " don't beep
set wildmenu
set wildmode=list:longest,full
""
"" REMAP
""
nnoremap <F4> :if (hlstate == 0) \| nohlsearch \| else \| set hlsearch \| endif \| let hlstate=1-hlstate<cr>
nnoremap Q <nop>
let mapleader=","
inoremap jk <ESC>
map <leader>w :w<return>
map <leader>q :q<return>
map <leader>Q :q!<return>
map <leader>W :w !sudo tee %<return>
"
"IMPORTED FROM
"https://github.com/mbrochh/vim-as-a-python-ide/blob/master/.vimrc
"
"
" Real programmers don't use TABs but spaces
set expandtab
set shiftround
set shiftwidth=4
set softtabstop=4
set tabstop=4

" easier moving of code blocks
" Try to go into visual mode (v), thenselect several lines of code here and
" then press ``>`` several times.
vnoremap < <gv " better indentation
vnoremap > >gv " better indentation



"Automatic reloading of .vimrc
autocmd! bufwritepost .vimrc source %"

" map sort function to a key
vnoremap <Leader>s :sort<CR>

" Settings for vim-powerline
set laststatus=2
" Settings for ctrlp
let g:ctrlp_max_height = 30
set wildignore+=*.pyc
set wildignore+=*_build/*
set wildignore+=*/coverage/*

" Settings for supertab
""let g:SuperTabDefaultCompletionType = "<c-x><c-o>"

" Settings for jedi-vim
let g:jedi#completions_command = "<C-N>"
let g:jedi#usages_command = "<leader>z"
let g:jedi#popup_on_dot = 1
let g:jedi#popup_select_first = 0
map <Leader>b Oimport ipdb; ipdb.set_trace() # BREAKPOINT<C-c>
"tab complete
" function! InsertTabWrapper(direction)
    " let col = col('.') - 1
    " if !col || getline('.')[col - 1] !~ '\k'
        " return "\<tab>"
    " elseif "backward" == a:direction
        " return "\<c-p>"
    " else
        " return "\<c-n>"
    " endif
" endfunction
" inoremap <tab> <c-r>=InsertTabWrapper ("forward")<cr>
" inoremap <s-tab> <c-r>=InsertTabWrapper ("backward")<cr>

set nofoldenable
"
"
"PYTHON
"
"
"let $PYTHONHOME='/System/Library/Frameworks/Python.framework/Versions/Current'
" let g:pymode_rope_lookup_project = 0
" let g:pymode_rope_autoimport = 0
let g:PyFlakeCheckers = 'pep8,mccabe,pyflakes'
let g:PyFlakeOnWrite = 1
let g:flake8_builtins="_,apply"
let g:flake8_max_line_length=120

" let g:PyFlakeDefaultComplexity=10
autocmd filetype py set foldmethod=indent
" autocmd BufWritePost *.py call Flake8()
" let g:PyFlakeAggressive = 2

"javascript
"
let javascript_enable_domhtmlcss=1
let g:user_emmet_leader_key='<C-Z>'

let g:minimap_highlight='StatusLine'

"NERDTREE
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
let NERDTreeShowHidden=1
"Easymotion"
let g:EasyMotion_do_mapping = 0 " Disable default mappings "
" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
" nmap <Leader>. <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
" nmap <Leader>. <Plug>(easymotion-s2)
nmap <Leader>. <Plug>(easymotion-s2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

"Unite
nnoremap <Leader>f :Unite -start-insert -auto-preview file<CR>
" nnoremap <space>/ :Unite grep:.<cr>

"ctrlp
" let g:ctrlp_map = '<c-p>'
" let g:ctrlp_cmd = 'CtrlPLastMode'
" let g:ctrlp_working_path_mode = 'ra'
" let g:ctrlp_extensions = ['buffertag', 'tag', 'line', 'dir']
" let g:ctrlp_user_command = 'find %s -type f'        " MacOSX/Linux "
"Multi cursor
let g:multi_cursor_use_default_mapping=0
" Default mapping
"Map start key separately from next key
